{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Tuning Reducer",
    "description": "A tuning reducer is a plugin that can take more consecutive tunings and combine them into a single one based on its algorithm.\nAs any plugin it can be defined as an object with a \"type\" property that identifies the tuning reducer to be used. Check the documentation for that property for details about what tuning reducers are supported.",
    "type": ["object", "string"],
    "oneOf": [
        { "$ref": "#/$defs/object" },
        { "$ref": "#/$defs/type" }
    ],
    "default": "merge",
    "$defs": {
        "mergeSettings": {
            "type": "object",
            "properties": {
                "equalityTolerance": {
                    "type": "number",
                    "title": "Equality Tolerance",
                    "description": "Maximum error allowed when checking if two tuning values are equal.\nWhen two corresponding tuning values of the same pitch class of two consecutive tunings are not equal within this tolerance, it is said that there is a conflict between them which blocks merging of those tunings.",
                    "minimum": -50,
                    "maximum": 50
                }
            }
        },
        "type": {
            "type": "string",
            "title": "Tuning Reducer Type",
            "description": "Name that serves as a unique identifier of the Tuning Reducer Type. The following values are allowed:\n- \"merge\": combines consecutive tunings as long as they don't have corresponding pitch classes that are in conflict. Two pitch classes are said to be in conflict if their tuning values are not close according to a tolerance value.\n- \"direct\": does not combine consecutive tunings and directly maps input tunings to output tunings, essentially disabling the reduce.",
            "enum": ["merge", "direct"],
            "default": "merge"
        },
        "object": {
            "type": "object",
            "properties": {
                "type": { "$ref": "#/$defs/type" }
            },
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "type": { "const": "merge" }
                        }
                    },
                    "then": { "$ref": "#/$defs/mergeSettings" }
                }
            ],
            "unevaluatedProperties": false
        }
    }
}
