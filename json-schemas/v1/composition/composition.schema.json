{
    "$id": "https://raw.githubusercontent.com/calinburloiu/microtonalist/main/json-schemas/v1/composition/composition.schema.json",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Composition",
    "description": "File format that defines a collection of tunings to be used in a musical composition. The player is expected to switch between tunings while playing the composition.",
    "type": "object",
    "properties": {
        "$schema": {
            "$comment": "Property added to allow adding the JSON-Schema for validation inside an editor.",
            "type": "string",
            "title": "JSON-Schema",
            "format": "uri-reference"
        },
        "metadata": { "$ref": "compositionMetadata.schema.json" },
        "intonationStandard": { "$ref": "../common/intonationStandard.schema.json" },
        "tuningReference": { "$ref": "tuningReference.schema.json" },
      "baseUrl": {
            "type": "string",
            "title": "Base URL",
            "description": "Custom base URL to be used for all internal URLs in this file. For local files this property allows changing the current directory.",
            "format": "uri-reference"
        },
        "definitions": {
            "type": "object",
            "title": "Definitions",
            "description": "Definitions gives a standardized place to keep internal composition assets to be reused. Currently, scales and tunings are the only supported assets, each one having its own section inside scales and tunings properties. Those assets can be referenced in other sections of the composition file by using their identifier.",
            "properties": {
                "scales": {
                    "type": "object",
                    "title": "Scale Definitions",
                    "description": "Key-value pairs, where keys are scale identifiers to be referenced in other sections of the composition file, and values are scale definitions which include both inline scale or an external URL for the scale. Keys should only use basic Latin letters, numbers, hyphens and underscores.",
                    "patternProperties": {
                        "^[\\w\\-_]+$": { "$ref": "../scale/scale-inContext.schema.json" }
                    },
                    "unevaluatedProperties": false
                },
                "tunings": {
                    "type": "object",
                    "title": "Tuning Definitions",
                    "description": "Key-value pairs, where keys are tuning specification identifiers to be referenced in other sections of the composition file, and values are tuning specifications. Keys should only use basic Latin letters, numbers, hyphens and underscores.",
                    "patternProperties": {
                        "^[\\w\\-_]+$": { "$ref": "tuningSpec.schema.json" }
                    },
                    "unevaluatedProperties": false
                }
            },
            "unevaluatedProperties": false
        },
        "tunings": {
            "type": "array",
            "title": "Tunings",
            "description": "An array of tuning specifications, where each one allows a scale to be mapped to a keyboard tuning.",
            "items": { "$ref": "#/$defs/tuningSpec" }
        },
        "fill": { "$ref": "#/$defs/fill" },
        "tuningReducer": { "$ref": "tuningReducer.schema.json" },
      "tracksUrl": {
            "type": "string",
            "title": "Tracks URL",
            "description": "Optional URL for the Tracks file. If not provided, the \".tracks\" extension is appended to the composition URL. E.g. Composition with URL \"file:///path/to/composition.mtlist\" has the default Tracks file with URL \"file:///path/to/composition.mtlist.tracks\".",
            "format": "uri-reference"
        },
        "settings": {
            "type": "object",
            "title": "Settings",
            "description": "Composition settings allow configuring defaults at the composition level for various settings of the plugins. A plugin (such as the tuningMapper) may omit some settings and in this case the values of from this section will be used.\nFor example, every tuning specifications can be configured with a tuningMapper. If all of them prefer to set shouldMapQuarterTonesLow to true, the setting can be set here and omit the property at the tuning specification level.",
            "properties": {
                "tuningReference": {
                    "type": "object",
                    "title": "Tuning Reference Settings",
                    "description": "Default settings for the tuning reference plugin.",
                    "properties": {
                        "standard": {
                            "$ref": "tuningReference.schema.json#/$defs/standardSettings",
                            "unevaluatedProperties": false
                        },
                        "concertPitch": {
                            "$ref": "tuningReference.schema.json#/$defs/concertPitchSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "intonationStandard": {
                    "type": "object",
                    "title": "Intonation Standard Settings",
                    "description": "Default settings for the intonation standard plugin.",
                    "properties": {
                        "edo": {
                            "$ref": "../common/intonationStandard.schema.json#/$defs/edoSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "tuningMapper": {
                    "type": "object",
                    "title": "Tuning Mapper Settings",
                    "description": "Default settings for the tuning mapper plugin.",
                    "properties": {
                        "manual": {
                            "$ref": "tuningMapper.schema.json#/$defs/manualSettings",
                            "unevaluatedProperties": false
                        },
                        "auto": {
                            "$ref": "tuningMapper.schema.json#/$defs/autoSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "tuningReducer": {
                    "type": "object",
                    "title": "Tuning Reducer Settings",
                    "description": "Default setting for the tuning reducer plugin.",
                    "properties": {
                        "merge": {
                            "$ref": "tuningReducer.schema.json#/$defs/mergeSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                }
            },
            "unevaluatedProperties": false
        }
    },
    "required": ["tuningReference", "tunings"],
    "unevaluatedProperties": false,
    "$defs": {
        "tuningSpec": {
            "oneOf": [
                { "$ref": "tuningSpec.schema.json" },
                {
                    "$comment": "A URL fragment that references a tuning spec declared locally.",
                    "type": "string",
                    "pattern": "^#[\\w\\-_]+$"
                }
            ]
        },
        "fill": {
            "type": "object",
            "title": "Fill",
            "description": "The fill controls the way missing pitch class tuning values are filled in cases where they are not explicitly provided by scales. There are multiple kinds of fills:\n- \"Local fill\": applies tuning values from tunings in spatial or temporal proximity. Spatial proximity refers to tunings that are close in the sequence, while temporal proximity to tunings that were recently applied. There are multiple kinds/strategies of local fill:\n    - \"Back-fill\": applies tuning values spatially that come from preceding tunings from the sequence.\n    - \"Fore-fill\": applies tuning values spatially that come from succeeding tunings from the sequence.\n    - \"Memory-fill\": applies tuning values temporally that come from recently tuned tunings.\n- \"Global fill\": is applied in the end after all other local fill strategies have been applied and attempts to fill the gaps with a custom tuning from a given global fill scale.",
            "properties": {
                "local": {
                    "type": "object",
                    "title": "Local Fill",
                    "description": "Local fill applies tuning values from tunings in spatial or temporal proximity.",
                    "properties": {
                        "backFillEnabled": {
                            "type": "boolean",
                            "title": "Back-fill Enabled",
                            "description": "Indicates whether local back-fill is enabled, which applies tuning values spatially that come from preceding tunings from the sequence.",
                            "default": true
                        },
                        "foreFillEnabled": {
                            "type": "boolean",
                            "title": "Fore-fill Enabled",
                            "description": "Indicates whether local fore-fill is enabled, which applies tuning values spatially that come from succeeding tunings from the sequence.",
                            "default": true
                        },
                        "memoryFillEnabled": {
                            "type": "boolean",
                            "title": "Memory-fill Enabled",
                            "description": "Indicates whether local memory-fill is enabled, which applies tuning values temporally that come from recently tuned tunings.",
                            "default": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "global": {
                    "allOf": [
                        { "$ref": "#/$defs/tuningSpec" },
                        {
                            "title": "Global Fill",
                          "description": "A tuning spec for the global fill, which is applied in the end after all other local fill strategies have been applied and attempts to fill the gaps with a custom tuning from a given global fill scale. If this tuning spec does not define tuning values for some unused keys, then, the standard 12-EDO tuning values are used for those keys (values with an offset of 0 cents). If the global fill is not provided, unused keys will use the standard 12-EDO tuning."
                        }
                    ]
                }
            },
            "unevaluatedProperties": false
        }
    }
}
