{
    "$id": "https://raw.githubusercontent.com/calinburloiu/microtonalist/main/json-schemas/v1/composition.schema.json",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Composition",
    "description": "File format that defines a collection of tunings to be used in a musical composition. The player is expected to switch between tunings while playing the composition.",
    "type": "object",
    "properties": {
        "$schema": {
            "$comment": "Property added to allow adding the JSON-Schema for validation inside an editor.",
            "type": "string",
            "title": "JSON-Schema",
            "format": "uri-reference"
        },
        "metadata": { "$ref": "compositionMetadata.schema.json" },
        "intonationStandard": { "$ref": "intonationStandard.schema.json" },
        "tuningReference": { "$ref": "tuningReference.schema.json" },
        "baseUri": {
            "type": "string",
            "title": "Base URI",
            "description": "Custom base URI to be used for all internal URIs in this file. For local files this property allows changing the current directory.",
            "format": "uri-reference"
        },
        "definitions": {
            "type": "object",
            "title": "Definitions",
            "description": "Definitions gives a standardized place to keep internal composition assets to be reused. Currently, scales and tunings are the only supported assets, each one having its own section inside scales and tunings properties. Those assets can be referenced in other sections of the composition file by using their identifier.",
            "properties": {
                "scales": {
                    "type": "object",
                    "title": "Scale Definitions",
                    "description": "Key-value pairs, where keys are scale identifiers to be referenced in other sections of the composition file, and values are scale definitions which include both inline scale or an external URI for the scale. Keys should only use basic Latin letters, numbers, hyphens and underscores.",
                    "patternProperties": {
                        "^[\\w\\-_]+$": { "$ref": "scale-inContext.schema.json" }
                    },
                    "unevaluatedProperties": false
                },
                "tunings": {
                    "type": "object",
                    "title": "Tuning Definitions",
                    "description": "Key-value pairs, where keys are tuning specification identifiers to be referenced in other sections of the composition file, and values are tuning specifications. Keys should only use basic Latin letters, numbers, hyphens and underscores.",
                    "patternProperties": {
                        "^[\\w\\-_]+$": { "$ref": "tuningSpec.schema.json" }
                    },
                    "unevaluatedProperties": false
                }
            },
            "unevaluatedProperties": false
        },
        "tunings": {
            "type": "array",
            "title": "Tunings",
            "description": "An array of tuning specifications, where each one allows a scale to be mapped to a keyboard tuning.",
            "items": { "$ref": "#/$defs/tuningSpec" }
        },
        "globalFill": {
            "allOf": [
                {
                    "title": "Global Fill",
                    "description": "Fallback tuning to be used for unused keyboard keys.\nIt is applied globally, for all tunings that have unused keys, by using the tuning values. If this fallback itself, does not define tuning values for some unused keys, then, the standard 12-EDO tuning values are used for those keys (values with a deviation of 0 cents). If the defaultFill is not provided, unused keys will use the standard 12-EDO tuning."
                },
                { "$ref": "#/$defs/tuningSpec" }
            ]
        },
        "tuningReducer": { "$ref": "tuningReducer.schema.json" },
        "settings": {
            "type": "object",
            "title": "Settings",
            "description": "Composition settings allow configuring defaults at the composition level for various settings of the format components. A format component (such as the tuningMapper) may omit some settings and in this case the values of from this section will be used.\nFor example, every tuning specifications can be configured with a tuningMapper. If all of them prefer to set shouldMapQuarterTonesLow to true, the setting can be set here and omit the property at the tuning specification level.",
            "properties": {
                "tuningReference": {
                    "type": "object",
                    "title": "Tuning Reference Settings",
                    "description": "Default settings for the tuning reference format component.",
                    "properties": {
                        "standard": {
                            "$ref": "tuningReference.schema.json#/$defs/standardSettings",
                            "unevaluatedProperties": false
                        },
                        "concertPitch": {
                            "$ref": "tuningReference.schema.json#/$defs/concertPitchSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "intonationStandard": {
                    "type": "object",
                    "title": "Intonation Standard Settings",
                    "description": "Default settings for the intonation standard format component.",
                    "properties": {
                        "edo": {
                            "$ref": "intonationStandard.schema.json#/$defs/edoSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "tuningMapper": {
                    "type": "object",
                    "title": "Tuning Mapper Settings",
                    "description": "Default settings for the tuning mapper format components.",
                    "properties": {
                        "manual": {
                            "$ref": "tuningMapper.schema.json#/$defs/manualSettings",
                            "unevaluatedProperties": false
                        },
                        "auto": {
                            "$ref": "tuningMapper.schema.json#/$defs/autoSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                },
                "tuningReducer": {
                    "type": "object",
                    "title": "Tuning Reducer Settings",
                    "description": "Default setting for the tuning reducer format components.",
                    "properties": {
                        "merge": {
                            "$ref": "tuningReducer.schema.json#/$defs/mergeSettings",
                            "unevaluatedProperties": false
                        }
                    },
                    "unevaluatedProperties": false
                }
            },
            "unevaluatedProperties": false
        }
    },
    "required": ["tuningReference", "tunings"],
    "unevaluatedProperties": false,
    "$defs": {
        "tuningSpec": {
            "oneOf": [
                { "$ref": "tuningSpec.schema.json" },
                {
                    "$comment": "A URI fragment that references a tuning spec declared locally.",
                    "type": "string",
                    "pattern": "^#[\\w\\-_]+$"
                }
            ]
        }
    }
}
